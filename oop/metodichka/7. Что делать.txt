В лабораторной работе № 7 необходимо выполнить перегрузку операций
и модифицировать методы сортировки и поиска (достаточно по одному)
так, чтобы использовать в них перегруженные операции.

Обязательно должны быть перегружены следующие операции:
  - индексирование (в классе предметно-ориентированного списка);
  - сравнение одного объекта с другим объектом (в классе Base);
  - сравнение объекта со значением некоторого типа (в Base).

Операция индексирования должна возвращать ссылку на объект класса
Base по его индексу (порядковому номеру) в списке, т.е. фактически
выполнять то же, что и метод GetItem. Однако, GetItem возвращает
указатель на объект, а операция индексирования - ссылку, т.е.
псевдоним объекта, который используется как сам объект,
следовательно к возвращаемой ссылке будут непосредственно применимы
другие операции, перегруженные для класса Base. Рекомендуется в
методе перегруженной операции индексирования просто возвращать
разадресованное значение, возвращенное методом GetItem, при
необходимости предварительно приведя его к типу Base*, например,
        return *(Base *)GetItem(i);
При необходимости, можно выполнить проверку индекса i и, в том
случае, если его значение недопустимо (меньше нуля или превышает
номер последнего элемента), предпринять соответствующие действия.

Операции сравнения одного объекта с другим рекомендуется
перегружать как методы класса Base. Можно ограничится только той
операцией (или теми), которые используются в алгоритме сортировки,
а не перегружать все (">", ">=", "<", "<="). Следует обратить
внимание, что операндами выступают объекты, а не указатели на них,
поэтому параметрами методов этих операций должны являться ссылки на
объекты класса Base (т.е. иметь тип Base &). Возвращаемое значение
этих операций - всегда логическое, т.е. типа int (ложь и истина -
это соответственно 0 и любое ненулевое значение, например 1).

Операции сравнения объекта со значением некоторого типа (строкой
символов - char*, целым числом - int и т.п.), будут использоваться
в методе поиска, поэтому их также рекомендуется перегружать как
методы и ограничиться только теми из них, которые будут
использоваться при поиске. Так если поиск нацелен на совпадение
значения некоторой характеристики объекта и заданного значения, то
перегружать следует операцию эквивалентности ("=="), а если на
принадлежность значения характеристики объекта некоторому
интервалу, то пару операций отношения (">" и "<" или ">=" и "<="),
в зависимости от того, как реализован алгоритм поиска. Тип
параметра метода перегруженной операции будет соответствовать типу
значения, с которым сравнивается объект, а возвращаемое значение
является логическим.

При реализации перегрузки операций сравнения следует помнить, что
эти методы, в свою очередь, тоже могут быть перегружены, т.е. в
одном классе одна операция может быть перегружена неоднократно и
соответствующие методы будут отличаться типом параметра. Например,
операция ">" может использоваться и для сортировки (с параметром
типа Base&), и для поиска по интервалу (с параметром другого типа).

В реализации методов перегруженных операций удобно использовать
виртуальные методы, возвращающие значение некоторой характеристики
объекта, по которой производится сортирока или поиск. Однако, и
сами методы перегруженных операций могут быть виртуальными (и даже
абстрактными). Например, метод перегруженной операции ">", который
выполняет сравнение объектов по некоторой текстовой характеристике
(имя, примечание, название и т.п.) может быть реализован так:
        return (strcmp(GetText(), r.GetText()) > 0);
где r - параметр-ссылка этого метода, представляющий собой правый
операнд, GetText - метод, возвращающий этот текст.
Метод сравнения объекта с числом может быть реализован следующим
образом:
        return GetValue() >= х;
где x - значени, с которым сравнивается объект, а GetValue - метод,
который возвращает значение интересующей характеристики объекта.

В результате перегрузки операций, должна быть изменена реализация
одного алгоритма сортировки и одного алгоритма поиска, после чего
они будут иметь примерно такой вид (здесь L - объект предметно-
ориентированного списка или ссылка на него):
  - сортировка (по возрастанию):
        n = L.Count();
        for (i = 0; i < n - 1; i++)    // i - левый
          for (j = i + 1; j < n; j++)  // j - правый
            if (L[i] > L[j])
              L.Insert(L.Remove(j), i);
  - поиск (в диапазоне от a до b включительно):
        n = L.Count();
        for (i = 0; i < n; i++)
          if (L[i] >= a && L[i] <= b)
              L[i].Print();
Здесь выражения "L[i]" и "L[j]" - использование перегруженной
операции индексирования "[]", ">" - перегруженная операция сравнения
двух объектов, а ">=" и "<=" - перегруженные операции сравнения
объекта со значением некоторого типа, которому принадлежат a и b.
Как видно из этих примеров, благодаря использованию перегруженных
операций, работа со списком объектов мало отличается от работы с
массивом из элементов встроенных (примитивных) типов данных.

