Реализацию функций расширенного базиса следует начать
с самых необходимых и самых простых функций. Самой
необходимой является функция Add - пока в списке нет
элементов, другие операции не имеют смысла и их отладка
будет невозможна. Самой простой функцией является Count,
кроме того, она удобна для тестирования функции Add
(добавили элемент - подсчитали количество элементов в
списке), а реализованный в ней циклический алгоритм
просмотра всего списка с небольшими изменениями будет
использоваться в функциях поиска GetItem и GetIndex.
После добавления элементов, наиболее необходимой и
входящей в минимальный базис операцией является
GetIndex. Также необходима функция Delete для
уничтожения динамически созданных объектов и
освобождения занимаемой ими памяти, но для ее
реализации необходима функция Remove, которая просто
исключает элемент из списка.

Исходя из сказанного выше, рекомендуется следующий
порядок реализации функций:
  1. Add      (самая необходимая)
  2. Count    (самая простая и для тестирования Add)
  3. GetItem  (проста и необходима для Remove)
  4. Remove   (необходима для Delete)
  5. Delete   (очень простая функция!)

Остальные функции можно реализовать в любом порядке,
т.к. они не связаны друг с другом, а являются
расширением базиса для эффективной реализации различных
алгоритмов обработки данных и часто выполняемых
операций.

>>> Реализуйте функции Add и Count.

При реализации функций необходимо выполнять их отладку,
т.е. надо "заставить" их работать. Т.к. функции сами по
себе еще не являются программами, то на данном шаге
следует создать главную функцию, которая будет вызывать
реализуемые функции. Чтобы тестирование каждой функции
было достаточно полным, необходимо "подстроить" все
возможные ситуации (неправильные значения параметров,
пустой список, крайний элемент, несуществующий элемент
и т.п.). Проще всего это обеспечить в тестирующей
программе при помощи меню, которое позволит вызывать
реализуемые функции в любом порядке (для каждой функции
- свой пункт меню!). При выборе каждого пункта меню
следует обеспечить:
 1. ввод параметров с клавиатуры (при необходимости);
 2. вызов функции;
 3. вывод результата (если функция возвращает значение).

В качестве первого параметра всех функций передается
указатель на структуру списка, объект которой можно
создать динамически или, что еще проще, как локальную
переменную. В любом случае поля этого обекта необходимо
инициализировать нулевыми значениями (список изначально
пуст). Функции Add и Insert требуют указатель на новый
элемент, включаемый в список - этот объект необходимо
создать динамически и передать полученный указатель на
него в качестве параметра. Функция поиска GetIndex
также требует указатель на элемент, но его значение
следует просто ввести с клавиатуры (функция scanf
использует спецификатор %p для ввода указателей).
Значение позиции (номера элемента) для функций Delete,
Remove, GetIndex и Insert необходимо также вводить с
клавиатуры.

>>> Реализуйте функцию main, в которой создайте объект
>>> структуры списка и обеспечьте вызов функций Add и
>>> Count.

Не всегда правильность работы функций можно оценить по
возвращаемым ими значениям и по количеству элементов в
списке. Для более эффективной работы (т.е. чтобы
потратить значительно меньше времени!) рекомендуется
дополнительно создать функцию (например PrintList),
которая отображает на экране состояние всего списка. В
качестве параметров она должна получать только указатель
на структуру списка, а вывод может иметь следующий вид:

  List: 0540  Head: 08C0  Tail: 0920
  #       p       prev    next
  0       08C0    0000    08C8
  1       08C8    08C0    08D0
  2       08D0    08C8    08D8
  3       08D8    08D0    0000

В такой таблице легко увидеть, правильно ли выполняется
та или иная функция, если напечатать состояние списка до
и после ее выполнения. Алгоритм функции PrintList прост -
циклический просмотр всего списка и печать каждого
элемента (т.е. как в Count, но с небольшими изменениями).
Для вывода значений указателей при помощи функции printf
используется спецификатор %p, например так:

  printf("%d\t%p\t%p\t%p\n", i, p, p->prev, p->next);

>>> Реализуйте функцию PrintList и проверьте ее работу.

>>> Создайте меню (если еще не создали) и обеспечьте
>>> вызов уже реализованных функций Add, Count и
>>> PrintList.

>>> Реализуйте остальные функции в указанном выше порядке,
>>> создавая для каждой новый пункт в меню и проводя ее
>>> тестирование.
