Берем проект из лабораторной работы № 2, добавляем в него
еще один модуль (новый), например subj.c, и создаем для
этого модуля свой заголовочный файл, например subj.h. Это
будет предметно-ориентированный модуль, содержащий решение
задачи в соответствии с вариантом. Решение выполняется
практически в полном соответствии с примером, показанным на
лекциях.

В заголовочном файле необходимо в первую очередь включить
заголовочный файл модуля списка (list.h) и далее привести
следующие объявления:
 - перечисление, значения которого соответствуют типам
   объектов;
 - стуктура базового уровня (например Base), содержащая
   поля, "унаследованные" от структуры Item, и поля, общие
   для объектов всех типов (структур-"потомков");
 - прототипы функций, выполняющих операции над отдельными
   объектами (например Print, Input и т.п.), требующих в
   качестве параметра указатель на объект базового уровня
   (т.е. struct Base *);
 - прототипы функций, выполняющих операции над списком в
   целом (например PrintList, Sort, Find и т.п.);
 - прототип фабричной функции (например Create), выполняющей
   создание объекта требуемого типа (тип задается
   соответствующим значением перечисления в качестве
   параметра, функция возвращает указатель базового типа на
   созданный объект).

В файле модуля (subj.c) необходимо:
 - включить стандартные заголовочные файлы (только при
   необходимости и только тогда, когда эта необходимость
   возникает, т.е. в процессе реализации следующих ниже
   пунктов);
 - включить заголовочный файл модуля (subj.h);
 - описать специфические структуры ("потомки" от базовой
   структуры);
 - реализовать специфические функции операций над объектами
   этих структур (например Print..., Input..., где "..."
   обозначает соответствующие типы специфических объектов);
 - реализовать объявленные ранее (в subj.h) функции операций
   над объектами (т.е. функции диспетчеризации, которые
   вызывают специфические функции в зависимости от
   фактического типа структуры);
 - реализовать функцию создания объекта (Create), которая в
   зависимости от значения, переданного ей в качестве
   параметра, создает объект соответствующего типа, т.е.
   выделяет память требуемого размера, инициализирует поля
   и возвращает указатель;
 - функции операций над списком в целом, объявленные в
   заголовочном файле (печать, поиск, сортировка и т.п.).

При реализации предметно-ориентированного модуля (файла кода
модуля subj.c и заголовочного файла subj.h) настоятельно
рекомендуется придерживаться именно того состава файлов и
порядка следования описаний в них, который представлен выше.

Очевидно, что в описании структуры Base используется тип
элемента Item, следовательно в заголовочный файл subj.h
необходимо включить заголовочный файл list.h. Так как файл
subj.h будет включен в main.c, из последнего надо убрать
директиву #include "list.h" во избежание повторного
описания типов, находящихся в этом файле. Таким образом,
состав проекта и взаимосвязи файлов будут следующими:


                +--------------------+
                |     |========|     |  |========|
                |--X--*        |     +--*        |
                |     |        |        |        |
                |     | list.h *------->| subj.h |
                |     |        |        |        |
                |  +--*        |     +--*        |
                |  |  |========|     |  |========|
                |  |                 |
                |  |                 |
    |========|  |  |  |========|     |  |========|
    |        |<-+  +->|        |     +->|        |
    |        |        |        |        |        |
    | main.c |        | list.c |        | subj.c |
    |        |        |        |        |        |
    |        |        |        |        |        |
    |========|        |========|        |========|

   \____________________________/
      лабораторная работа № 2

   \______________________________________________/
              лабораторная работа № 3






