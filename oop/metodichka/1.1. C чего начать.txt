Не вдаваясь в подробности устройства двусвязного списка, можно
сказать, что реализовать необходимо 2 структуры и 8 функций.
Структуры описывают объекты элемента списка (назовем эту
структуру Item) и собственно списка (List). Функции представляют
собой набор операций над списком.

Элемент списка содержит два поля - указатели на предыдущий (prev)
и на следующий (next) элементы списка, т.е. структура Item состоит
из двух указателей на структуру Item. Это не значит, что структура
Item ссылается сама на себя - это значит, что объекты типа Item
ссылаются друг на друга, т.е. каждый элемент хранит адреса двух
своих соседей.

Структура списка также состоит из двух указателей - на первый
(часто его называют головой - head) и на последний (хвост - tail)
элементы в списке, следовательно, будут иметь тот же тип -
указатель на структуру Item.

Таким образом, элементы списка пока не хранят никакой "полезной"
информации, а содержат только служебные поля, позволяющие
организовать какие-либо данные в виде линейной структуры. При
решении какой-либо конкретной задачи, элементы списка могут быть
дополнены соответствующими специфическими полями.

>>> Опишите структуры List и Item.

Структуры - это только данные, а что и как с ними делать, какие
операции можно выполнять над списком - это алгоритмы, которые
должны быть реализованы в виде функций. Для этого необходимо
определить, какие операции над списком необходимы для реализации
любых алгоритмов обработки данных. Функций минимального базиса
достаточно для реализации любых алгоритмов обработки данных,
содержащихся в списке, но такая реализация во многих случаях
будет неэффективной. Поэтому необходимо реализовать
дополнительные операции, которые составляют расширенный базис из
следующих 8 функций:

---------+--------------------------+--------------+-------------
   имя   |         параметры        | возвращаемое | выполняемая
 функции +--------+---------+-------+   значение   |  операция
         | список | элемент | номер |              |
---------+--------+---------+-------+--------------+-------------
                       МИНИМАЛЬНЫЙ БАЗИС
---------+--------+---------+-------+--------------+-------------
 Add     |    +   |    +    |       |    (нет)     | добавление
         |        |         |       |              | элемента в
         |        |         |       |              | "хвост"
---------+--------+---------+-------+--------------+-------------
 Delete  |    +   |         |   +   |    (нет)     | удаление
         |        |         |       |              | элемента
---------+--------+---------+-------+--------------+-------------
 GetItem |    +   |         |   +   |   элемент    | поиск эле-
         |        |         |       |              | мента по его
         |        |         |       |              | номеру
---------+--------+---------+-------+--------------+-------------
                       РАСШИРЕННЫЙ БАЗИС
---------+--------+---------+-------+--------------+-------------
 Remove  |    +   |         |   +   |   элемент    | исключение
         |        |         |       |              | элемента
---------+--------+---------+-------+--------------+-------------
 Insert  |    +   |    +    |   +   |    (нет)     | вставка
         |        |         |       |              | элемента в
         |        |         |       |              | заданную
         |        |         |       |              | позицию
---------+--------+---------+-------+--------------+-------------
 Count   |    +   |         |       |  количество  | подсчет
         |        |         |       |              | элементов
         |        |         |       |              | в списке
---------+--------+---------+-------+--------------+-------------
 Clear   |    +   |         |       |    (нет)     | очистка
         |        |         |       |              | списка
---------+--------+---------+-------+--------------+-------------
 GetIndex|    +   |    +    |       |    номер     | определение
         |        |         |       |              | номера эле-
         |        |         |       |              | мента по
         |        |         |       |              | указателю
         |        |         |       |              | на него
---------+--------+---------+-------+--------------+-------------

Так как список и элемент списка представлены структурами, то для
передачи их в качестве параметров необходимо использовать
указатели на структуры List и Item соответственно. При этом, если
функция не изменяет значения полей структуры, переданной в качестве
параметра по указателю, то соответствующий параметр должен быть
описан с ключевым словом const, т.е. являться указателем на
константные данные.

Номер элемента и количество элементов в списке - величины
целочисленные, поэтому эти параметры и возвращаемые значения должны
иметь соответствующий тип (а не указатели не него!).

>>> Приведите прототипы всех восьми указанных функций.
>>> Реализации алгоримов этих функций будет выполняться ниже, т.е.
>>> приведенные прототипы необходимо сохранить в неизменном виде.

